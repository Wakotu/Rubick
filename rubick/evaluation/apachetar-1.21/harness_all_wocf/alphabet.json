{
  "alias2event": {
    "\u344e": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String)>"
    ],
    "\u34bd": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getName()>"
    ],
    "\u34d7": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isPaxGNU1XSparse()>"
    ],
    "\u35b1": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>"
    ],
    "\u36de": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void close()>"
    ],
    "\u37ce": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int getRecordSize()>"
    ],
    "\u37d0": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>"
    ],
    "\u3812": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream)>"
    ],
    "\u38ef": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String,byte)>"
    ],
    "\u39b4": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isSymbolicLink()>"
    ],
    "\u39ff": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Date getModTime()>"
    ],
    "\u3afd": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>"
    ],
    "\u3b44": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry)>"
    ],
    "\u3b51": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getLinkName()>"
    ],
    "\u3c96": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: org.apache.commons.compress.archivers.tar.TarArchiveEntry[] getDirectoryEntries()>"
    ],
    "\u3cea": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()>"
    ],
    "\u3dbe": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()>"
    ],
    "\u4158": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isDirectory()>"
    ],
    "\u44ab": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isStreamContiguous()>"
    ],
    "\u4647": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Date getLastModifiedDate()>"
    ],
    "\u46d7": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>"
    ],
    "\u4756": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isLink()>"
    ],
    "\u47bb": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getDataOffset()>"
    ],
    "\u47da": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse: long getNumbytes()>"
    ],
    "\u48d1": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[])>"
    ],
    "\u4949": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[],int,int)>"
    ],
    "\u4a92": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Map getExtraPaxHeaders()>"
    ],
    "\u4c61": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.io.File,java.lang.String)>"
    ]
  },
  "def2var": {
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isDirectory()>.ITR": "v_16_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isDirectory()>.RET": "v_16_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isLink()>.ITR": "v_4_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isLink()>.RET": "v_4_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isPaxGNU1XSparse()>.ITR": "v_17_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isPaxGNU1XSparse()>.RET": "v_17_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isStreamContiguous()>.ITR": "v_27_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isStreamContiguous()>.RET": "v_27_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isSymbolicLink()>.ITR": "v_9_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isSymbolicLink()>.RET": "v_9_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.ITR": "v_6_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET": "v_6_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getLinkName()>.ITR": "v_8_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getLinkName()>.RET": "v_8_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getName()>.ITR": "v_19_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getName()>.RET": "v_19_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Date getLastModifiedDate()>.ITR": "v_13_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Date getLastModifiedDate()>.RET": "v_13_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Date getModTime()>.ITR": "v_23_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Date getModTime()>.RET": "v_23_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>.ITR": "v_15_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>.RET": "v_15_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>.ITR": "v_5_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>.RET": "v_5_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Map getExtraPaxHeaders()>.ITR": "v_3_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Map getExtraPaxHeaders()>.RET": "v_3_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getDataOffset()>.ITR": "v_0_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getDataOffset()>.RET": "v_0_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>.ITR": "v_25_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>.RET": "v_25_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: org.apache.commons.compress.archivers.tar.TarArchiveEntry[] getDirectoryEntries()>.ITR": "v_2_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: org.apache.commons.compress.archivers.tar.TarArchiveEntry[] getDirectoryEntries()>.RET": "v_2_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.io.File,java.lang.String)>.ITR": "v_18_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.io.File,java.lang.String)>.RET": "v_18_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String)>.ITR": "v_10_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String)>.RET": "v_10_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String,byte)>.ITR": "v_22_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String,byte)>.RET": "v_22_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry)>.ITR": "v_21_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry)>.RET": "v_21_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int getRecordSize()>.ITR": "v_11_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int getRecordSize()>.RET": "v_11_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[])>.ITR": "v_24_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[])>.RET": "v_24_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[],int,int)>.ITR": "v_12_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[],int,int)>.RET": "v_12_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()>.ITR": "v_7_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()>.RET": "v_7_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()>.ITR": "v_20_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()>.RET": "v_20_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream)>.ITR": "v_14_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream)>.RET": "v_14_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void close()>.ITR": "v_26_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void close()>.RET": "v_26_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse: long getNumbytes()>.ITR": "v_1_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse: long getNumbytes()>.RET": "v_1_",
    "null": "null"
  }
}