{
  "alias2event": {
    "n": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse: long getNumbytes()>"
    ],
    "\u34cf": [
      "Z",
      "v_17_ == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()>.RET"
      ]
    ],
    "\u3519": [
      "Z",
      "Extract(8, 8, v_13_) == 1",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u351b": [
      "Z",
      "Not(Extract(7, 7, v_13_) == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u3536": [
      "Z",
      "v_11_ <= 1024",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>.RET"
      ]
    ],
    "\u3603": [
      "Z",
      "Not(Extract(8, 8, v_13_) == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u3604": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[],int,int)>"
    ],
    "\u3664": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isSymbolicLink()>"
    ],
    "\u36c3": [
      "Z",
      "Extract(6, 6, v_13_) == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u36dc": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int 958272236_$i19_LOOPVAR_<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[])>.RET_((int)(((long)((int)(((long)arg0) + 0L))) cmp \ud83d\udfae))(int)>"
    ],
    "\u36fd": [
      "Z",
      "Extract(5, 5, v_13_) == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u3711": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isLink()>"
    ],
    "\u3797": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry)>"
    ],
    "\u37aa": [
      "Z",
      "Extract(7, 7, v_13_) == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u3810": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getName()>"
    ],
    "\u3866": [
      "Z",
      "Not(Extract(3, 3, v_13_) == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u38a9": [
      "Z",
      "v_4_ == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isDirectory()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isDirectory()>.RET"
      ]
    ],
    "\u3981": [
      "Z",
      "v_26_ <= 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[])>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[])>.RET"
      ]
    ],
    "\u39af": [
      "Z",
      "Not(v_4_ == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isDirectory()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isDirectory()>.RET"
      ]
    ],
    "\u39d1": [
      "Z",
      "Extract(0, 0, v_13_) == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u39d2": [
      "Z",
      "v_15_ == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>_ITERABLE_hasNext(java.util.Iterator)>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>_ITERABLE_hasNext(java.util.Iterator)>.RET"
      ]
    ],
    "\u39f0": [
      "Z",
      "Not(Extract(6, 6, v_13_) == 1)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u39f8": [
      "Z",
      "Extract(6, 6, v_13_) == 1",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u3a5e": [
      "Z",
      "Not(Extract(2, 2, v_13_) == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u3aa7": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.io.File,java.lang.String)>"
    ],
    "\u3ac2": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>"
    ],
    "\u3b0a": [
      "Z",
      "Not(v_11_ <= 16384)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>.RET"
      ]
    ],
    "\u3b39": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.Object <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>_ITERABLE_next(java.util.Iterator)>"
    ],
    "\u3bbb": [
      "Z",
      "Not(v_26_ <= 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[])>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[])>.RET"
      ]
    ],
    "\u3c21": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>_ITERABLE_hasNext(java.util.Iterator)>"
    ],
    "\u3c95": [
      "Z",
      "Not(And(Extract(0, 0, v_13_) == 0,\n        Extract(3, 3, v_13_) == 0,\n        Extract(6, 6, v_13_) == 0))",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u3c9a": [
      "Z",
      "Extract(2, 2, v_13_) == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u3c9e": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Date getLastModifiedDate()>"
    ],
    "\u3cc9": [
      "Z",
      "v_32_ == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>_ITERABLE_hasNext(java.util.Iterator)>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>_ITERABLE_hasNext(java.util.Iterator)>.RET"
      ]
    ],
    "\u3ce0": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>_ITERABLE_hasNext(java.util.Iterator)>"
    ],
    "\u3d32": [
      "Z",
      "Not(v_27_ == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isSymbolicLink()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isSymbolicLink()>.RET"
      ]
    ],
    "\u3d7f": [
      "Z",
      "Not(v_32_ == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>_ITERABLE_hasNext(java.util.Iterator)>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>_ITERABLE_hasNext(java.util.Iterator)>.RET"
      ]
    ],
    "\u3df8": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()>"
    ],
    "\u3e08": [
      "Z",
      "Not(Extract(7, 7, v_13_) == 1)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u3ed8": [
      "Z",
      "Extract(7, 7, v_13_) == 1",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u3edc": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: org.apache.commons.compress.archivers.tar.TarArchiveEntry[] getDirectoryEntries()>"
    ],
    "\u3f4b": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Date getModTime()>"
    ],
    "\u3f50": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int 1521985949_$i6_LOOPVAR__((int)-1)()>"
    ],
    "\u3f8b": [
      "Z",
      "Not(v_15_ == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>_ITERABLE_hasNext(java.util.Iterator)>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>_ITERABLE_hasNext(java.util.Iterator)>.RET"
      ]
    ],
    "\u3fdb": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>"
    ],
    "\u40d1": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isPaxGNU1XSparse()>"
    ],
    "\u40fb": [
      "Z",
      "Not(v_13_ == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u4118": [
      "Z",
      "v_23_ <= 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[],int,int)>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[],int,int)>.RET"
      ]
    ],
    "\u4162": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isDirectory()>"
    ],
    "\u419e": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isStreamContiguous()>"
    ],
    "\u41ac": [
      "Z",
      "Not(v_23_ <= 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[],int,int)>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[],int,int)>.RET"
      ]
    ],
    "\u41c3": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[])>"
    ],
    "\u41c9": [
      "Z",
      "Extract(1, 1, v_13_) == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u4201": [
      "Z",
      "v_24_ == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isLink()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isLink()>.RET"
      ]
    ],
    "\u4202": [
      "Z",
      "Extract(3, 3, v_13_) == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u4234": [
      "Z",
      "Extract(4, 4, v_13_) == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u4251": [
      "Z",
      "Not(Extract(8, 8, v_13_) == 1)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u42ad": [
      "Z",
      "Not(v_23_ == v_7_)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[],int,int)>.RET",
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int 1521985949_$i6_LOOPVAR__((int)-1)()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[],int,int)>.RET",
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int 1521985949_$i6_LOOPVAR__((int)-1)()>.RET"
      ]
    ],
    "\u4393": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int getRecordSize()>"
    ],
    "\u43db": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getLinkName()>"
    ],
    "\u4435": [
      "Z",
      "Not(Extract(1, 1, v_13_) == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u4476": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String,byte)>"
    ],
    "\u45a2": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Map getExtraPaxHeaders()>"
    ],
    "\u45a6": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>"
    ],
    "\u45d2": [
      "Z",
      "Not(Extract(0, 0, v_13_) == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u467e": [
      "Z",
      "Not(v_11_ <= 1024)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>.RET"
      ]
    ],
    "\u4796": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getDataOffset()>"
    ],
    "\u4880": [
      "Z",
      "Extract(8, 8, v_13_) == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u48bd": [
      "Z",
      "v_9_ == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()>.RET"
      ]
    ],
    "\u48c3": [
      "Z",
      "Not(v_9_ == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()>.RET"
      ]
    ],
    "\u48d5": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()>"
    ],
    "\u48f5": [
      "Z",
      "Not(v_24_ == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isLink()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isLink()>.RET"
      ]
    ],
    "\u4943": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream)>"
    ],
    "\u495f": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String)>"
    ],
    "\u4960": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void close()>"
    ],
    "\u4a0f": [
      "Z",
      "v_27_ == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isSymbolicLink()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isSymbolicLink()>.RET"
      ]
    ],
    "\u4a20": [
      "Z",
      "Not(Extract(4, 4, v_13_) == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u4a41": [
      "Z",
      "Not(v_17_ == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()>.RET"
      ]
    ],
    "\u4aa6": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.Object <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>_ITERABLE_next(java.util.Iterator)>"
    ],
    "\u4adb": [
      "Z",
      "Not(Extract(5, 5, v_13_) == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u4b2d": [
      "Z",
      "Not(Extract(6, 6, v_13_) == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u4b5d": [
      "F",
      "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>"
    ],
    "\u4b9b": [
      "Z",
      "Not(v_10_ == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry)>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry)>.RET"
      ]
    ],
    "\u4bbb": [
      "Z",
      "And(Extract(0, 0, v_13_) == 0,\n    Extract(3, 3, v_13_) == 0,\n    Extract(6, 6, v_13_) == 0)",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ],
    "\u4c2e": [
      "Z",
      "v_11_ <= 16384",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>.RET"
      ]
    ],
    "\u4d2b": [
      "Z",
      "v_10_ == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry)>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry)>.RET"
      ]
    ],
    "\u4d95": [
      "Z",
      "v_23_ == v_7_",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[],int,int)>.RET",
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int 1521985949_$i6_LOOPVAR__((int)-1)()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[],int,int)>.RET",
        "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int 1521985949_$i6_LOOPVAR__((int)-1)()>.RET"
      ]
    ],
    "\u4db9": [
      "Z",
      "v_13_ == 0",
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ],
      [
        "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET"
      ]
    ]
  },
  "def2var": {
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>_ITERABLE_hasNext(java.util.Iterator)>.ITR": "v_15_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>_ITERABLE_hasNext(java.util.Iterator)>.RET": "v_15_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>_ITERABLE_hasNext(java.util.Iterator)>.ITR": "v_32_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>_ITERABLE_hasNext(java.util.Iterator)>.RET": "v_32_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isDirectory()>.ITR": "v_4_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isDirectory()>.RET": "v_4_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isLink()>.ITR": "v_24_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isLink()>.RET": "v_24_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isPaxGNU1XSparse()>.ITR": "v_28_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isPaxGNU1XSparse()>.RET": "v_28_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isStreamContiguous()>.ITR": "v_18_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isStreamContiguous()>.RET": "v_18_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isSymbolicLink()>.ITR": "v_27_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isSymbolicLink()>.RET": "v_27_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.ITR": "v_13_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>.RET": "v_13_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.Object <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>_ITERABLE_next(java.util.Iterator)>.ITR": "v_30_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.Object <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>_ITERABLE_next(java.util.Iterator)>.RET": "v_30_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.Object <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>_ITERABLE_next(java.util.Iterator)>.ITR": "v_21_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.Object <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>_ITERABLE_next(java.util.Iterator)>.RET": "v_21_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getLinkName()>.ITR": "v_2_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getLinkName()>.RET": "v_2_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getName()>.ITR": "v_0_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getName()>.RET": "v_0_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Date getLastModifiedDate()>.ITR": "v_12_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Date getLastModifiedDate()>.RET": "v_12_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Date getModTime()>.ITR": "v_33_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Date getModTime()>.RET": "v_33_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>.ITR": "v_3_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getOrderedSparseHeaders()>.RET": "v_3_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>.ITR": "v_29_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.List getSparseHeaders()>.RET": "v_29_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Map getExtraPaxHeaders()>.ITR": "v_16_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Map getExtraPaxHeaders()>.RET": "v_16_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getDataOffset()>.ITR": "v_31_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getDataOffset()>.RET": "v_31_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>.ITR": "v_11_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>.RET": "v_11_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: org.apache.commons.compress.archivers.tar.TarArchiveEntry[] getDirectoryEntries()>.ITR": "v_20_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: org.apache.commons.compress.archivers.tar.TarArchiveEntry[] getDirectoryEntries()>.RET": "v_20_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.io.File,java.lang.String)>.ITR": "v_19_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.io.File,java.lang.String)>.RET": "v_19_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String)>.ITR": "v_14_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String)>.RET": "v_14_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String,byte)>.ITR": "v_8_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String,byte)>.RET": "v_8_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry)>.ITR": "v_10_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry)>.RET": "v_10_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int 1521985949_$i6_LOOPVAR__((int)-1)()>.RET": "v_7_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int 958272236_$i19_LOOPVAR_<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[])>.RET_((int)(((long)((int)(((long)arg0) + 0L))) cmp \ud83d\udfae))(int)>.RET": "v_1_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int getRecordSize()>.ITR": "v_5_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int getRecordSize()>.RET": "v_5_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[])>.ITR": "v_26_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[])>.RET": "v_26_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[],int,int)>.ITR": "v_23_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int read(byte[],int,int)>.RET": "v_23_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()>.ITR": "v_17_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()>.RET": "v_17_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()>.ITR": "v_9_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()>.RET": "v_9_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream)>.ITR": "v_6_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void <init>(java.io.InputStream)>.RET": "v_6_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void close()>.ITR": "v_22_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void close()>.RET": "v_22_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse: long getNumbytes()>.ITR": "v_25_itr_",
    "<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse: long getNumbytes()>.RET": "v_25_",
    "null": "null"
  }
}